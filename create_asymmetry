import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import argparse

# Using Argument Parser to get the location of image
args = argparse.ArgumentParser()
args.add_argument('-i', '--file', required=True, help='Path to image')
arg = args.parse_args()

filename = arg.file
full_arr = np.genfromtxt('%s' % filename)
#plt.imshow(full_arr[:,:],aspect='auto', origin='lower')
#plt.colorbar()
#plt.title('Original image')
#plt.show()
x, y = full_arr.shape
print x,y
 
#1. find the noise level
def findchange(data, start, gap, bin):
    x, y = data.shape
    number = int(x/bin)
    ymean_list = []
    i=0
    while i<number:
        ymean_list.append(np.mean(data[i*bin:(i+1)*bin,start:start+gap]))
        i += 1

    j = 0
    while j<len(ymean_list):
        if ymean_list[j] < np.mean(ymean_list):
            break
        else:
            j += 1

    return ymean_list,j 

ymean_list, start = findchange(full_arr, 0, 20, 1)
#plt.plot(ymean_list)
#plt.plot([0,1000],[np.mean(ymean_list), np.mean(ymean_list)])
#plt.title('determine noise level')
#plt.show()

def get_mean(full, bin):
    x, y = full.shape
    number = int(y/bin)
    print number
    data = full[:,:]
    mean_list = []
    i = 0
    while i<=number:
        mean_list.append(np.mean(data[:,bin*i:bin*(i+1)]))
        i += 1
    return mean_list
    

mean_list = get_mean(full_arr[start:,:], 1)
file_name = '%s_asymmetry.txt' % filename
np.savetxt('%s' % file_name, mean_list[:-1],  fmt='%.5f')  


#plt.plot(mean_list)
#plt.title('vertical')
#plt.show()

















"""

def find_center(data):
    lens = len(data)
    middle = int(lens/2.0)
    max = np.argmax(data[middle-20:middle+20])
    max = middle - 20 + max
    
    return max




max = find_center(mean_list)

x=np.linspace(0, max-1, num=max-1, endpoint=True, retstep=False, dtype=int)

#Let's create a function to model and create data
def func(x, a, x0, sigma):
    return a*np.exp(-(x-x0)**2/(2*sigma**2))

print len(mean_list[0:max-1])
# Executing curve_fit on noisy data
largest = np.max(mean_list[0:max-1])
largest_location = np.argmax(mean_list[0:max-1])
std = np.std(mean_list[0:max-1])
p0=(largest, largest_location, std)
print p0
popt, pcov = curve_fit(func, x, mean_list[0:max-1], p0=p0)

#popt returns the best fit values for parameters of the given model (func)
print popt

ym = func(x, popt[0], popt[1], popt[2])
plt.plot(x, ym, c='r', label='Best fit')
plt.plot(x,mean_list[0:max-1])
plt.show()


def findchange(data, start, gap, bin):
    x, y = data.shape
    number = int(x/bin)
    ymean_list = []
    i=0
    while i<number:
        ymean_list.append(np.mean(data[i*bin:(i+1)*bin,start:start+gap]))
        i += 1

    return ymean_list

ymean_list = findchange(full_arr, 0, 20, 1)
plt.plot(ymean_list)
plt.title('determine backgroud using horizontal within 0-20 bin')
plt.show()
        
    

def cut(data, start, gap, bin):
    x, y = data.shape
    number = int(y/bin)
    cut_list = []
    i = 0
    while i<number:
        cut_list.append(np.mean(data[start:start+gap, i*bin:(i+1)*bin]))
        i += 1

    return cut_list

cut_list = cut(full_arr, 200, 400, 1)
plt.plot(cut_list)
plt.title('horizontal average after removing backgroud')
plt.show()
"""
    
